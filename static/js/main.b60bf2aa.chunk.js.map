{"version":3,"sources":["core/squares.ts","core/utils.ts","Field.tsx","core/speedLevels.ts","Settings.tsx","Score.tsx","core/score.ts","GameOver.tsx","core/selectors.ts","core/moveSnake.ts","core/snake.ts","core/newGame.ts","core/changeDirection.ts","App.tsx","index.tsx"],"names":["snakeHead","type","bodyPart","id","uuidv4","snakeTrunk","index","snakeTail","food","emptySquare","WIDTH","HEIGHT","oppositeDirections","sort","join","height","flattenedCoordinatesField","Array","fill","map","column","xIndex","value","yIndex","x","y","flat","generateFoodCoordinates","seed","fieldWithSnake","freeCoordinates","filter","max","min","rng","seedrandom","Math","floor","createRandomNumberGenerator","length","random","createEmptyField","width","updateAppearance","darkMode","window","document","documentElement","classList","add","remove","FieldSquare","square","className","Field","renderedField","gameState","field","row","rowIndex","columnIndex","style","gridTemplateColumns","gridTemplateRows","speedMap","delay","description","getDefaultSpeed","findIndex","Settings","onSpeedChange","useState","hovering","setHovering","speed","setSpeed","useEffect","onMouseEnter","onMouseLeave","step","onChange","event","newSpeed","parseInt","target","Score","current","score","setScore","startingScore","options","countDelay","writable","subscribe","update","newScore","setTimeout","previous","startScoring","scoreStore","GameOver","onNewGameClick","finalScore","onClick","selectField","selectDirection","direction","selectSnakeSize","snakeSize","getNewHeadCoordinates","headCoordinates","fn","coordinates","forEach","rowArray","findCoordinatesForSquare","newHeadColumn","newHeadRow","defaultDelay","noop","startSnakeGame","logger","foodCoordinates","foodConsumed","gameOver","newGame","commandQueue","lastDelay","paused","startTimer","setInterval","newDirection","direction1","direction2","oldDirection","indexOf","changeDirection","actuallyChangeDirection","shift","newState","newHeadCoordinates","foodConsumedOnThisMove","newField","moveSnake","clearInterval","previousIntervalId","changeDelayBetweenMoves","newDelay","push","togglePause","destroy","App","snakeGame","setSnakeGame","undefined","setGameState","setDarkMode","newGameState","handleKeypress","key","toLowerCase","addEventListener","removeEventListener","handleSpeedChange","useCallback","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b60bf2aa.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport type { Square } from './types';\n\nexport function snakeHead(): Square {\n  return { type: 'snake', bodyPart: 'head', id: uuidv4() };\n}\n\nexport function snakeTrunk({ index }: { index: number }): Square {\n  return { type: 'snake', bodyPart: 'trunk', index, id: uuidv4() };\n}\n\nexport function snakeTail(): Square {\n  return { type: 'snake', bodyPart: 'tail', id: uuidv4() };\n}\n\nexport function food(): Square {\n  return { type: 'food', id: uuidv4() };\n}\n\nexport function emptySquare(): Square {\n  return { type: 'empty', id: uuidv4() };\n}\n","import seedrandom from 'seedrandom';\nimport { emptySquare } from './squares';\nimport type { Direction, Field, Square } from './types';\n\nexport const WIDTH = 32;\nexport const HEIGHT = 17;\nexport const STARTING_ROW = 8;\n\nexport function createRandomNumberGenerator(\n  seed: number | string,\n  { max, min = 0 }: { max: number; min?: number },\n): () => number {\n  const rng = seedrandom(seed);\n  return () => min + Math.floor(rng() * max);\n}\n\nexport function createFlattenedCoordinatesField(\n  width: number,\n  height: number,\n): Array<{ x: number; y: number }> {\n  const emptyField = new Array(width).fill(null).map(() => new Array(height).fill(null));\n  const coordinatesField = emptyField.map((column, xIndex) => {\n    return column.map((value, yIndex) => {\n      return { x: xIndex, y: yIndex };\n    });\n  });\n  return coordinatesField.flat();\n}\n\nexport function findCoordinatesForSquare(\n  field: Field,\n  fn: (square: Square) => boolean,\n): { row: number; column: number } {\n  let coordinates;\n  field.forEach((rowArray, row) => {\n    rowArray.forEach((square, column) => (fn(square) ? (coordinates = { row, column }) : null));\n  });\n\n  return coordinates;\n}\n\nconst oppositeDirections = [['left', 'right'].sort().join(','), ['up', 'down'].sort().join(',')];\n\nexport function areOpposite(direction1: Direction, direction2: Direction): boolean {\n  return oppositeDirections.indexOf([direction1, direction2].sort().join(',')) >= 0;\n}\n\nconst flattenedCoordinatesField = createFlattenedCoordinatesField(HEIGHT, WIDTH);\n\n/**\n * Pick food location at random, avoiding fields occupied by the snake.\n */\nexport function generateFoodCoordinates(\n  seed: string | number,\n  fieldWithSnake: Field,\n): { x: number; y: number } {\n  // Selecting from an array of free coordinates ensures that each field has the same chance of containing food.\n  const freeCoordinates = flattenedCoordinatesField.filter(({ x, y }) => {\n    return fieldWithSnake[x][y]?.type !== 'snake';\n  });\n\n  const random = createRandomNumberGenerator(seed, { max: freeCoordinates.length });\n  return freeCoordinates[random()];\n}\n\nexport function createEmptyField(width: number, height: number): Field {\n  return new Array(height)\n    .fill(null)\n    .map(() => new Array(width).fill(null).map(() => emptySquare()));\n}\n\nexport function updateAppearance(darkMode: boolean): void {\n  if (darkMode) {\n    window.document.documentElement.classList.add('dark');\n  } else {\n    window.document.documentElement.classList.remove('dark');\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { GameState, Square } from './core/types';\nimport { HEIGHT, WIDTH } from './core/utils';\n\nconst FieldSquare: FunctionComponent<{ square: Square }> = ({ square }) => {\n  if (square?.type === 'snake') {\n    switch (square.bodyPart) {\n      case 'head':\n        return <div className=\"bg-black dark:bg-green-300 w-vh-large h-vh-large\"></div>;\n      case 'trunk':\n        return <div className=\"bg-black dark:bg-green-300 w-vh-medium h-vh-medium\"></div>;\n      case 'tail':\n        return <div className=\"bg-black dark:bg-green-300 w-vh-xs h-vh-xs\"></div>;\n    }\n  }\n\n  if (square?.type === 'food') {\n    return <div className=\"rounded-full bg-svelte-red w-vh-small h-vh-small\"></div>;\n  }\n\n  return <div className=\"w-vh-large h-vh-large\"></div>;\n};\n\nconst Field: FunctionComponent<{ gameState: GameState }> = ({ gameState }) => {\n  const renderedField = gameState.field.map((row, rowIndex) => {\n    return row.map((square, columnIndex) => (\n      <FieldSquare key={`${rowIndex}${columnIndex}`} square={square} />\n    ));\n  });\n\n  return (\n    <div\n      className=\"grid place-items-center gap-vh-small p-vh-small border-4 border-solid border-black dark:border-gray-200\"\n      style={{\n        gridTemplateColumns: `repeat(${WIDTH}, 3.6vh)`,\n        gridTemplateRows: `repeat(${HEIGHT}, 3.6vh)`,\n      }}\n    >\n      {renderedField}\n    </div>\n  );\n};\n\nexport default Field;\n","// Order is important\nexport const speedMap = [\n  { delay: 300000, description: '\"Need to make some coffee\" speed' }, // cca. 5 minutes between moves\n  { delay: 700, description: 'Dead snail on a slope' },\n  { delay: 540, description: 'Snail' },\n  { delay: 400, description: 'Sloth' },\n  { delay: 320, description: 'Snail running from a bird' },\n  { delay: 230, description: 'Turtle' },\n  { delay: 160, description: 'Turtle on a skateboard' },\n  { delay: 80, description: 'Regular speed' },\n  { delay: 50, description: 'Fast' },\n  { delay: 30, description: 'Cheetah' },\n  { delay: 20, description: 'Cheetah driving a Porsche' },\n  { delay: 10, description: 'M-497 Black Beetle' },\n  { delay: 4, description: 'Warp 11' }, // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval#delay_restrictions\n];\n\nexport function getDefaultSpeed(): number {\n  return speedMap.findIndex((value) => value.delay === 80);\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useState } from 'react';\nimport { speedMap, getDefaultSpeed } from './core/speedLevels';\n\nconst Settings: FunctionComponent<{ onSpeedChange: (speed: number) => void }> = ({\n  onSpeedChange,\n}) => {\n  const [hovering, setHovering] = useState(false);\n  const [speed, setSpeed] = useState(getDefaultSpeed());\n\n  useEffect(() => {\n    onSpeedChange(speedMap[speed].delay);\n  }, [onSpeedChange, speed]);\n\n  function handleSpeedChange(event: ChangeEvent<HTMLInputElement>) {\n    const newSpeed = parseInt(event.target.value, 10);\n    setSpeed(newSpeed);\n    onSpeedChange(speedMap[newSpeed].delay);\n  }\n\n  return (\n    <div\n      className=\"mt-3 flex flex-col items-center justify-start h-12\"\n      onMouseEnter={() => setHovering(true)}\n      onMouseLeave={() => setHovering(false)}\n    >\n      <span>{speedMap[speed].description}</span>\n      <div className=\"mt-1\">\n        <input\n          className={`w-56 mx-2 ${\n            hovering ? 'opacity-100' : 'opacity-0'\n          } transition duration-500 ease-in-out`}\n          type=\"range\"\n          value={speed}\n          min=\"0\"\n          max={speedMap.length - 1}\n          step=\"1\"\n          onChange={handleSpeedChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport startScoring from './core/score';\n\nconst Score: FunctionComponent<{ current: number }> = ({ current }) => {\n  const [score, setScore] = useState(0);\n  const [scoreStore] = useState(startScoring());\n\n  useEffect(() => {\n    const unsubscribe = scoreStore.subscribe((newScore) => {\n      setScore(newScore);\n    });\n\n    return unsubscribe;\n  }, [scoreStore]);\n\n  scoreStore.newScore(current);\n\n  return (\n    <>\n      Score: <span>{score}</span>\n    </>\n  );\n};\n\nexport default Score;\n","import { writable } from 'svelte/store';\n\ninterface ScoreStore {\n  subscribe(subscriber): () => void;\n  newScore(newScore: number): void;\n}\n\nexport default function startScoring(startingScore = 0, options = { countDelay: 20 }): ScoreStore {\n  const { subscribe, update } = writable(startingScore);\n  let current = startingScore;\n\n  return {\n    subscribe,\n    newScore(newScore) {\n      if (newScore < current) {\n        const difference = current - newScore;\n        const step = 1500 / difference;\n        if (step < 4) {\n          update(() => newScore);\n        } else {\n          for (let index = current; index > newScore; index--) {\n            setTimeout(() => update((previous) => previous - 1), index * step);\n          }\n        }\n      } else {\n        for (let index = 1; index <= newScore - current; index++) {\n          setTimeout(() => update((previous) => previous + 1), index * options.countDelay);\n        }\n      }\n      current = newScore;\n    },\n  };\n}\n","import React, { FunctionComponent } from 'react';\n\nconst GameOver: FunctionComponent<{ onNewGameClick: () => void; finalScore: number }> = ({\n  onNewGameClick,\n  finalScore,\n}) => {\n  return (\n    <div className=\"flex items-center justify-center flex-col opacity-90 bg-black fixed w-full h-full top-0 left-0 z-50\">\n      <h1 className=\"text-white text-3xl my-5\">Game over</h1>\n      <p className=\"text-svelte-red uppercase text-7xl m-16\">Final score: {finalScore}</p>\n      <button\n        className=\"relative border-none rounded-md w-44 h-14 bg-svelte-red text-white text-base font-bold uppercase px-2 py-4 hover:bg-svelte-red-dark\"\n        onClick={onNewGameClick}\n      >\n        New game{' '}\n      </button>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import type { Direction, Field, GameState } from './types';\n\nexport function selectField(gameState: GameState): Field {\n  return gameState.field;\n}\n\nexport function selectDirection(gameState: GameState): Direction {\n  return gameState.direction;\n}\n\nexport function selectSnakeSize(gameState: GameState): number {\n  return gameState.snakeSize;\n}\n","import { WIDTH, HEIGHT, findCoordinatesForSquare, generateFoodCoordinates } from './utils';\nimport { selectDirection, selectField, selectSnakeSize } from './selectors';\nimport { snakeHead, snakeTail, snakeTrunk, food, emptySquare } from './squares';\nimport type { GameState } from './types';\n\nexport function moveSnake(\n  gameState: GameState,\n  seed = Math.floor(Math.random() * 10000000),\n): GameState {\n  const field = selectField(gameState);\n  const snakeSize = selectSnakeSize(gameState);\n  const newHeadCoordinates = getNewHeadCoordinates(field, selectDirection(gameState));\n\n  if (\n    field[newHeadCoordinates.row][newHeadCoordinates.column]?.type === 'snake' &&\n    field[newHeadCoordinates.row][newHeadCoordinates.column].bodyPart != 'tail'\n  ) {\n    return { ...gameState, gameOver: true };\n  }\n\n  let foodConsumedOnThisMove = false;\n  const newField = field.map((row, rowIndex) => {\n    return row.map((square, columnIndex) => {\n      // Tail moves away unless food was consumed on previous move\n      if (square?.type === 'snake' && square.bodyPart === 'tail') {\n        if (newHeadCoordinates.row === rowIndex && newHeadCoordinates.column === columnIndex) {\n          return { ...snakeHead(), id: square.id };\n        }\n        return gameState.foodConsumed ? square : { ...emptySquare(), id: square.id };\n      }\n      // Head becomes trunk\n      if (square?.type === 'snake' && square.bodyPart === 'head') {\n        return { ...snakeTrunk({ index: 0 }), id: square.id };\n      }\n      if (square?.type === 'snake' && square.bodyPart === 'trunk') {\n        // Last trunk element is now a tail unless food was consumed on previous move\n        if (square.index === snakeSize - 3 && !gameState.foodConsumed) {\n          return { ...snakeTail(), id: square.id };\n        }\n\n        return { ...snakeTrunk({ index: square.index + 1 }), id: square.id };\n      }\n      if (\n        (square.type === 'empty' || square.type === 'food') &&\n        columnIndex === newHeadCoordinates.column &&\n        rowIndex === newHeadCoordinates.row\n      ) {\n        if (square) {\n          foodConsumedOnThisMove = square.type === 'food';\n        }\n        return { ...snakeHead(), id: square.id };\n      }\n\n      return square;\n    });\n  });\n\n  if (gameState.foodConsumed) {\n    const foodCoordinates = generateFoodCoordinates(seed, newField);\n    newField[foodCoordinates.x][foodCoordinates.y] = {\n      ...food(),\n      id: newField[foodCoordinates.x][foodCoordinates.y].id,\n    };\n  }\n\n  return {\n    ...gameState,\n    foodConsumed: foodConsumedOnThisMove,\n    field: newField,\n    snakeSize: gameState.foodConsumed ? gameState.snakeSize + 1 : gameState.snakeSize,\n    score: foodConsumedOnThisMove ? gameState.score + 5 : gameState.score,\n  };\n}\n\nfunction getNewHeadCoordinates(field, direction) {\n  const headCoordinates = findCoordinatesForSquare(\n    field,\n    (square) => square?.type === 'snake' && square.bodyPart === 'head',\n  );\n\n  let newHeadColumn = headCoordinates.column;\n  if (direction === 'left') {\n    newHeadColumn = headCoordinates.column - 1 < 0 ? WIDTH - 1 : headCoordinates.column - 1;\n  } else if (direction === 'right') {\n    newHeadColumn = headCoordinates.column + 1 === WIDTH ? 0 : headCoordinates.column + 1;\n  }\n\n  let newHeadRow = headCoordinates.row;\n  if (direction === 'up') {\n    newHeadRow = headCoordinates.row - 1 < 0 ? HEIGHT - 1 : headCoordinates.row - 1;\n  } else if (direction === 'down') {\n    newHeadRow = headCoordinates.row + 1 === HEIGHT ? 0 : headCoordinates.row + 1;\n  }\n\n  return { row: newHeadRow, column: newHeadColumn };\n}\n","import { writable } from 'svelte/store';\nimport { changeDirection } from './changeDirection';\nimport { moveSnake } from './moveSnake';\nimport { newGame } from './newGame';\nimport { getDefaultSpeed, speedMap } from './speedLevels';\nimport type { Direction } from './types';\n\nconst defaultDelay = speedMap[getDefaultSpeed()].delay;\n\ninterface snakeGameOptions {\n  delay?: number;\n  logger?: (message) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\nexport interface SnakeGame {\n  subscribe(subscriber): () => void;\n  changeDirection(direction: Direction): void;\n  changeDelayBetweenMoves(newDelay: number): void;\n  togglePause(): void;\n  destroy(): void;\n}\n\nexport default function startSnakeGame({\n  delay = defaultDelay,\n  logger = noop,\n}: snakeGameOptions): SnakeGame {\n  const { subscribe, update } = writable(newGame());\n  const commandQueue = [];\n  let lastDelay = delay;\n  let paused = false;\n\n  function startTimer(delay) {\n    return setInterval(() => {\n      logger(`Calling setInterval handler (delay: ${delay})`);\n      actuallyChangeDirection(update, commandQueue.shift());\n      update((previous) => {\n        const newState = moveSnake(previous);\n        if (newState.gameOver) {\n          clearInterval(previousIntervalId);\n        }\n\n        return newState;\n      });\n    }, delay);\n  }\n\n  let previousIntervalId = startTimer(delay);\n\n  function changeDelayBetweenMoves(newDelay) {\n    lastDelay = newDelay;\n    clearInterval(previousIntervalId);\n    previousIntervalId = startTimer(newDelay);\n  }\n\n  return {\n    subscribe,\n    changeDirection(direction) {\n      if (!paused) {\n        commandQueue.push(direction);\n      }\n    },\n    changeDelayBetweenMoves,\n    togglePause() {\n      if (paused) {\n        changeDelayBetweenMoves(lastDelay);\n        paused = false;\n      } else {\n        paused = true;\n        clearInterval(previousIntervalId);\n      }\n    },\n    destroy() {\n      clearInterval(previousIntervalId);\n    },\n  };\n}\n\nfunction actuallyChangeDirection(update, newDirection) {\n  if (newDirection) {\n    update((previous) => changeDirection(previous, newDirection));\n  }\n}\n","import { WIDTH, HEIGHT, STARTING_ROW, createEmptyField, generateFoodCoordinates } from './utils';\nimport { snakeHead, snakeTail, snakeTrunk, food } from './squares';\nimport type { GameState } from './types';\n\nexport function newGame(seed = Math.floor(Math.random() * 10000000)): GameState {\n  const field = createEmptyField(WIDTH, HEIGHT);\n  field[STARTING_ROW][13] = snakeTail();\n  field[STARTING_ROW][14] = snakeTrunk({ index: 3 });\n  field[STARTING_ROW][15] = snakeTrunk({ index: 2 });\n  field[STARTING_ROW][16] = snakeTrunk({ index: 1 });\n  field[STARTING_ROW][17] = snakeTrunk({ index: 0 });\n  field[STARTING_ROW][18] = snakeHead();\n\n  const foodCoordinates = generateFoodCoordinates(seed, field);\n  field[foodCoordinates.x][foodCoordinates.y] = food();\n\n  return {\n    field,\n    direction: 'right',\n    snakeSize: 6,\n    foodConsumed: false,\n    gameOver: false,\n    score: 0,\n  };\n}\n","import { areOpposite } from './utils';\nimport { selectDirection } from './selectors';\nimport type { Direction, GameState } from './types';\n\nexport function changeDirection(gameState: GameState, newDirection: Direction): GameState {\n  const oldDirection = selectDirection(gameState);\n\n  return {\n    ...gameState,\n    direction: areOpposite(oldDirection, newDirection) ? oldDirection : newDirection,\n  };\n}\n","import React, { FunctionComponent, KeyboardEvent, useCallback, useEffect, useState } from 'react';\nimport Field from './Field';\nimport Settings from './Settings';\nimport Score from './Score';\nimport GameOver from './GameOver';\nimport startSnakeGame from './core/snake';\nimport { GameState } from './core/types';\nimport { updateAppearance } from './core/utils';\n\nconst App: FunctionComponent = () => {\n  const [snakeGame, setSnakeGame] = useState(() => startSnakeGame({}));\n  const [gameState, setGameState] = useState<GameState | undefined>(undefined);\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    snakeGame.subscribe((newGameState) => setGameState(newGameState));\n    return snakeGame.destroy;\n  }, [snakeGame]);\n\n  useEffect(() => {\n    updateAppearance(darkMode);\n  }, [darkMode]);\n\n  useEffect(() => {\n    function handleKeypress(event: KeyboardEvent) {\n      const key = event.key.toLowerCase();\n      if (key === 'w') {\n        snakeGame.changeDirection('up');\n      } else if (key === 's') {\n        snakeGame.changeDirection('down');\n      } else if (key === 'd') {\n        snakeGame.changeDirection('right');\n      } else if (key === 'a') {\n        snakeGame.changeDirection('left');\n      } else if (key === 'p') {\n        snakeGame.togglePause();\n      }\n    }\n    window.addEventListener('keypress', handleKeypress as unknown as EventListener);\n\n    return () => window.removeEventListener('keypress', handleKeypress as unknown as EventListener);\n  }, [snakeGame]);\n\n  // Prevents unnecessary renders of Settings component.\n  const handleSpeedChange = useCallback(\n    (newDelay: number) => {\n      snakeGame.changeDelayBetweenMoves(newDelay);\n    },\n    [snakeGame],\n  );\n\n  if (!gameState) {\n    return <></>;\n  }\n\n  function restart() {\n    snakeGame.destroy();\n    setSnakeGame(startSnakeGame({}));\n  }\n\n  function toggleDarkMode() {\n    setDarkMode((previous) => !previous);\n    updateAppearance(darkMode);\n  }\n\n  return (\n    <main className=\"flex flex-col items-center\">\n      <h1 className=\"uppercase text-7xl text-svelte-red font-thin my-12\">Snake</h1>\n      <div className=\"flex flex-col items-start\">\n        <span className=\"flex justify-between text-3xl w-full\">\n          <span>\n            <Score current={gameState.score} />\n          </span>\n          <button onClick={toggleDarkMode}>{darkMode ? '☀️' : '🌙'}</button>\n        </span>\n        <Field gameState={gameState} />\n      </div>\n      <Settings onSpeedChange={handleSpeedChange} />\n      {gameState.gameOver && <GameOver onNewGameClick={restart} finalScore={gameState.score} />}\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}